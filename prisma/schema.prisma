// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db { //connecting prisma with DB
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  emailVerified DateTime?
  image     String?
  accounts  Account[]
  sessions  Session[]
  trips Trip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime   
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken{
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip{
id String @id @default(cuid())

  title String
  description String
  imageUrl String?
  imageId String? // ID of the image in Cloudinary
  location String

  startDate DateTime
  endDate DateTime

  userId String

user User @relation(fields: [userId], references: [id], onDelete: Cascade)//info about user who created the trip
//The relation will be between userId (which was sent on creating the trip) and id (of User model)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}